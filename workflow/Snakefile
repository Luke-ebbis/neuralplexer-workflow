## NeuralPlexer workflow for investigating protein-ligand binding.
## 
## A workflow to predict the interaction between proteins and Ligands using
## NeuralPlexer by Qiao et al. Right now, the usage of PDB files with SIF files
## as ligands is supported.
## 
## Workflow made by Sibbe Bakker

INPUTS=[name for name in os.listdir("data/")]

## output:
##    A directory with SIF files, holding the different possible locations of
##    the predicted ligands, and the pdb file with the receptor structure.
##
rule all:
  input:
    expand("results/data/{jobname}/output",
        jobname=INPUTS)

## Rules
## =====
## 

rule install_sdf:
  output:
    touch("results/checkpoint/sdf_install")
  shell:
    """
    cargo install scidataflow
    """

## install_neural_plexer_apptainer:
##    Installs the NeuralPlexer tool from the docker image as an Apptainer.
##    It uses the docker image as listed on 
##    [drailab docker hub](https://hub.docker.com/r/drailab/neuralplexer).
##
rule install_neural_plexer_apptainer:
  """Build the NeuralPlexer container

  Documentation:
    See [docs](https://apptainer.org/docs/user/latest/build_a_container.html)
    for more information.
  """
  output: "results/dependencies/neuralplexer/neuralplexer.sif"
  shell:
    """
    # the Docker command that would've done this is
    # docker pull drailab/neuralplexer
    apptainer build {output} docker://drailab/neuralplexer
    """

## download_neuralplexer_checkpoint_data:
##    Will download 8.3 Gb of NeuralPlexer model data from Zenodo, containing 
##    the model weights and testing data.
##
rule download_neuralplexer_checkpoint_data:
  output: "results/downloads/NeuralPlexerModelData.zip"
  shell:
    """
    wget -O {output} https://zenodo.org/records/10373581/files/neuralplexermodels_downstream_datasets_predictions.zip?download=1
    """

## Unzip the downloaded neuralplexer data:
##    The dataset contains the weights and the test data. In total 24 GB. Of
##    which the weights (data/neuralplexermodels_downstream_datasets_predictions
##    /models/complex_structure_prediction.ckp) make up 2.8 Gb.
##
rule unzip_neuralplexer_checkpoint_data:
  input: "results/downloads/NeuralPlexerModelData.zip"
  output: directory("results/dependencies/neuralplexer/data")
  shell:
    """
    mkdir {output}
    unzip {input} -d {output}
    """

## run_neural_plexer:
##    Run the neuralplexer tool on a job directory, with a pdb file as the 
##    receptor and a SIF file as the ligand. Multiple SIF files are supported.
##
rule run_neural_plexer:
  """neuralplexer rule

  note -- for now only sdf files are supported.
  """
  input:
    image="resources/images/np-updated.sif",
    checkpoint="results/dependencies/neuralplexer/data/neuralplexermodels_downstream_datasets_predictions/models/complex_structure_prediction.ckpt",
    jobdir="data/{jobname}"
  output:
    directory("results/data/{jobname}/output")
  shell:
    """
    mkdir {output} -p
    RECEPTOR="$(ls {input.jobdir}/*pdb)"
    # CHATJIPPITY
    LIGAND="$(ls {input.jobdir}/*sdf | awk '{{printf "%s|", $0}}' | awk '{{sub(/\|$/,"")}}1')"


    echo "Analysing the binding between $RECEPTOR and $LIGAND files"
    apptainer run --nv {input.image} neuralplexer-inference \
       --task=batched_structure_sampling \
       --input-receptor $RECEPTOR \
       --input-ligand  $LIGAND \
       --sampler=langevin_simulated_annealing \
       --model-checkpoint {input.checkpoint} \
       --n-samples 16 \
       --chunk-size 4 \
       --num-steps=40 \
       --cuda \
       --out-path {output}
    """

## run_neural_plexer_fasta:
##    Run the neuralplexer tool on a job directory, with a pdb file as the 
##    receptor and a SIF file as the ligand. Multiple SIF files are supported.
##
rule run_neural_plexer_fasta:
  """neuralplexer rule

  note -- for now only sdf files are supported.
  """
  input:
    image="results/dependencies/images/neuralplexer.sif",
    checkpoint="results/dependencies/neuralplexer/data/neuralplexermodels_downstream_datasets_predictions/models/complex_structure_prediction.ckpt",
    jobdir="data/{jobname}"
  output:
    directory("results/data/{jobname}/output")
  shell:
    """
    mkdir {output} -p
    LIGAND="$(ls {input.jobdir}/*sdf | awk '{{printf "%s|", $0}}' | awk '{{sub(/\|$/,"")}}1')"


    FASTA=$(tail -n +2 data/IMPDH1/P47996.fasta | tr -d '\n')

    apptainer run --nv {input.image}  neuralplexer-inference        \
	  --task=batched_structure_sampling        \
	  --input-receptor "$FASTA|$FASTA|$FASTA|$FASTA" \
	  --input-ligand  data/withATP/ATP-2d.sdf \
	  --sampler=langevin_simulated_annealing        \
	  --model-checkpoint results/dependencies/neuralplexer/data/neuralplexermodels_downstream_datasets_predictions/models/complex_structure_prediction.ckpt      \
	  --n-samples 10 \
	  --chunk-size 1        \
	  --num-steps=40        --cuda        \
	  --out-path {output}
     """


## help:
##    Show the help.
##
rule help:
  input: "workflow/Snakefile"
  shell:
      "sed -n 's/^##//p' {input}"

## clean:                     
##    Clean all outputs from the results folder. Ignores the downloaded
##    NeuralPlexer dependencies.  
##
rule clean:
  shell:
      "rm -rf results/data"

## build_overview:            
##    Print the directed acyclic graph.
##
rule build_overview:
  output:
    "results/method.{fileformat}"
  shell:
    """
    snakemake -c 1 --forceall --dag | dot -T{wildcards.fileformat} > {output}
    """
