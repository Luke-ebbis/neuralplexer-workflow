## NeuralPlexer workflow.
## 
## A workflow to predict the interaction between proteins and Ligands using
## NeuralPlexer.
## 
## Rules
## =====
## 


## install_neural_plexer_apptainer:
##    Installs the NeuralPlexer tool from the docker image as an Apptainer.
##
rule install_neural_plexer_apptainer:
  """Build the NeuralPlexer container

  Documentation:
    See [docs](https://apptainer.org/docs/user/latest/build_a_container.html)
    for more information.
  """
  output: "results/dependencies/neuralplexer/neuralplexer.sif"
  shell:
    """
    # the Docker command that would've done this is
    # docker pull drailab/neuralplexer
    apptainer build {output} docker://drailab/neuralplexer 
    """

## download_neuralplexer_checkpoint_data:
##    Will download 8.3 Gb of NeuralPlexer model data from Zenodo, containing 
##    the model weights and testing data.
##
rule download_neuralplexer_checkpoint_data:
  output: "results/downloads/NeuralPlexerModelData.zip"
  shell:
    """
    wget -O {output} https://zenodo.org/records/10373581/files/neuralplexermodels_downstream_datasets_predictions.zip?download=1
    """

## Unzip the downloaded neuralplexer data:
##    The dataset contains the weights and the test data. In total 24 GB. Of
##    which the weights (data/neuralplexermodels_downstream_datasets_predictions
##    /models/complex_structure_prediction.ckp) make up 2.8 Gb.
##
rule unzip_neuralplexer_checkpoint_data:
  input: "results/downloads/NeuralPlexerModelData.zip"
  output: directory("results/dependencies/neuralplexer/data")
  shell:
    """
    mkdir {output}
    unzip {input} -d {output}
    """

## help:
##    Show the help.
##
rule help:
  input: "workflow/Snakefile"
  shell:
      "sed -n 's/^##//p' {input}"

## clean:                     
##    Clean all outputs from the results folder.
##
rule clean:
  shell:
      "rm -rf results/*"

## build_overview:            
##    Print the directed acyclic graph.
##
rule build_overview:
  output:
    "results/method.{fileformat}"
  shell:
    """
    snakemake -c 1 --forceall --dag | dot -T{wildcards.fileformat} > {output}
    """
